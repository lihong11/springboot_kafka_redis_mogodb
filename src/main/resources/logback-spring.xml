<?xml version="1.0" encoding="utf-8" ?>
<!-- scan: 若配置文件发生改变时，则会被重新加载，默认为true
     scanPeriod: 扫描配置文件是否发生修改的时间间隔(默认单位: 毫秒， 默认1分钟)
     debug: 当设置为true时，将打印logback内部日志，默认为false
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 自定义参数 -->
    <!-- 定义日志文件的存放位置 -->
    <!--<property name="log_dir" value="/logs/rsb_protal" />-->
    <property name="APP_NAME" value="rsb-portal" />
    <property name="log_dir" value="/opt/uyun/alertState/logs" />
    <!-- 日志最大保存的历史天数 -->
    <property name="maxHistory" value="20" />

    <!-- 日志控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logs.dir}/${APP_NAME}.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logs.dir}/${APP_NAME}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>10MB</maxFileSize>
            <maxHistory>30</maxHistory>
            <totalSizeCap>100MB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d{yy-MM-dd HH:mm:ss.SSS} %-5level [%-20thread] [%-30logger{30}] %msg%n</pattern>
        </encoder>
    </appender>

    <!--&lt;!&ndash; ERROR级别日志 &ndash;&gt;-->
    <!--<appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
        <!--<file>${log_dir}/error/rsb-portal-error.log</file>-->
        <!--&lt;!&ndash; 过滤器,只记录ERROR级别的日志&ndash;&gt;-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--<level>ERROR</level>-->
            <!--<onMatch>ACCEPT</onMatch>-->
            <!--<onMismatch>DENY</onMismatch>-->
        <!--</filter>-->
        <!--&lt;!&ndash; 滚动策略(时间滚动策略) &ndash;&gt;-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
            <!--&lt;!&ndash; 日志输出位置 &ndash;&gt;-->
            <!--<fileNamePattern>${log_dir}/error/%d{yyyy-MM-dd}/rsb-portal-error.log</fileNamePattern>-->
            <!--<maxHistory>${maxHistory}</maxHistory>-->
        <!--</rollingPolicy>-->
        <!--&lt;!&ndash; 文件大小回滚策略:  当文件大于20MB时，生成新的日志文件。当保存了5个归档文件后，将覆盖最早记录的日志。&ndash;&gt;-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">-->
            <!--<fileNamePattern>${log_dir}/error/%d{yyyy-MM-dd}/rsb-portal-error_%i.zip</fileNamePattern> &lt;!&ndash; 这里必须加%i，滚动的时候显示文件的序号  &ndash;&gt;-->
            <!--<minIndex>1</minIndex>-->
            <!--<maxIndex>5</maxIndex>-->
        <!--</rollingPolicy>-->
        <!--&lt;!&ndash; 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动 &ndash;&gt;-->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">     -->
        <!--  <maxFileSize>10MB</maxFileSize>     -->
        <!--</triggeringPolicy>-->
        <!--<encoder>-->
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger - %msg%n</pattern>-->
        <!--</encoder>-->
    <!--</appender>-->

    <!--&lt;!&ndash; DEBUG级别的日志 &ndash;&gt;-->
    <!--<appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
        <!--<file>${log_dir}/debug/rsb-portal-debug.log</file>-->
        <!--&lt;!&ndash; 过滤器,只记录ERROR级别的日志&ndash;&gt;-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--<level>DEBUG</level>-->
            <!--<onMatch>ACCEPT</onMatch>-->
            <!--<onMismatch>DENY</onMismatch>-->
        <!--</filter>-->
        <!--&lt;!&ndash; 滚动策略(时间滚动策略) &ndash;&gt;-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
            <!--&lt;!&ndash; 日志输出位置 &ndash;&gt;-->
            <!--<fileNamePattern>${log_dir}/debug/%d{yyyy-MM-dd}/rsb-portal-debug_%i.log</fileNamePattern>-->
            <!--<maxHistory>${maxHistory}</maxHistory>-->
        <!--</rollingPolicy>-->
        <!--&lt;!&ndash; 文件大小回滚策略:  当文件大于20MB时，生成新的日志文件。当保存了5个归档文件后，将覆盖最早记录的日志。&ndash;&gt;-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">-->
            <!--<fileNamePattern>${log_dir}/debug/%d{yyyy-MM-dd}/rsb-portal-debug_%i.zip</fileNamePattern> &lt;!&ndash; 这里必须加%i，滚动的时候显示文件的序号  &ndash;&gt;-->
            <!--<minIndex>1</minIndex>-->
            <!--<maxIndex>5</maxIndex>-->
        <!--</rollingPolicy>-->
        <!--&lt;!&ndash; 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动 &ndash;&gt;-->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">     -->
            <!--  <maxFileSize>10MB</maxFileSize>  -->
            <!--   <fileNamePattern>${log_dir}/debug/%d{yyyy-MM-dd}/rsb-portal-debug_%i.log</fileNamePattern>-->
        <!--</triggeringPolicy>-->
        <!--<encoder>-->
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger - %msg%n</pattern>-->
        <!--</encoder>-->
    <!--</appender>-->

    <!-- logger根元素，输出root级别的日志 -->
    <root level="ERROR">
        <!-- 将日志级别大于DEBUG的日志信息交给以下处理器去处理 -->
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE" />
        <!--<appender-ref ref="DEBUG_FILE" />-->
    </root>

    <logger name="uyun.*" level="ERROR"/>
</configuration>